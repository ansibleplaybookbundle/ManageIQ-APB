#############################################################################
# Provision manageiq-apb
# Provions ManageIQ - an open source management platform for Hybrid IT
#############################################################################
- name: process secret
  k8s_v1_secret:
    state: "{{ state }}"
    namespace: "{{ namespace }}"
    name: "manageiq-secrets"
    string_data:
      pg-password: "{{ postgresql_password }}"
      admin-password: "{{ manageiq_password }}"
      database-url: "postgresql://{{ postgresql_user }}:{{ postgresql_password }}@postgresql/{{ postgresql_database }}?encoding=utf8&pool=5&wait_timeout=5"
      v2-key: "{{ v2_key }}"
      artemis-password: "{{ artemis_password }}"

- name: process miq config map
  k8s_v1_config_map:
    state: "{{ state }}"
    namespace: "{{ namespace }}"
    name: "manageiq-app-configs"
    data:
      01_miq_overrides.conf: |
        #------------------------------------------------------------------------------
        # CONNECTIONS AND AUTHENTICATION
        #------------------------------------------------------------------------------
        tcp_keepalives_count = 9
        tcp_keepalives_idle = 3
        tcp_keepalives_interval = 75
        #------------------------------------------------------------------------------
        # RESOURCE USAGE (except WAL)
        #------------------------------------------------------------------------------
        shared_preload_libraries = 'pglogical,repmgr_funcs'
        max_worker_processes = 10
        #------------------------------------------------------------------------------
        # WRITE AHEAD LOG
        #------------------------------------------------------------------------------
        wal_level = 'logical'
        wal_log_hints = on
        wal_buffers = 16MB
        checkpoint_completion_target = 0.9
        #------------------------------------------------------------------------------
        # REPLICATION
        #------------------------------------------------------------------------------
        max_wal_senders = 10
        wal_sender_timeout = 0
        max_replication_slots = 10
        hot_standby = on
        #------------------------------------------------------------------------------
        # ERROR REPORTING AND LOGGING
        #------------------------------------------------------------------------------
        log_filename = 'postgresql.log'
        log_rotation_age = 0
        log_min_duration_statement = 5000
        log_connections = on
        log_disconnections = on
        log_line_prefix = '%t:%r:%c:%u@%d:[%p]:'
        log_lock_waits = on
        #------------------------------------------------------------------------------
        # AUTOVACUUM PARAMETERS
        #------------------------------------------------------------------------------
        log_autovacuum_min_duration = 0
        autovacuum_naptime = 5min
        autovacuum_vacuum_threshold = 500
        autovacuum_analyze_threshold = 500
        autovacuum_vacuum_scale_factor = 0.05
        #------------------------------------------------------------------------------
        # LOCK MANAGEMENT
        #------------------------------------------------------------------------------
        deadlock_timeout = 5s
        #------------------------------------------------------------------------------
        # VERSION/PLATFORM COMPATIBILITY
        #------------------------------------------------------------------------------
        escape_string_warning = off
        standard_conforming_strings = off

- name: process http config map
  k8s_v1_config_map:
    state: "{{ state }}"
    namespace: "{{ namespace }}"
    name: "manageiq-httpd-configs"
    data:
      application.conf: |
        # Timeout: The number of seconds before receives and sends time out.
        Timeout 120
        RewriteEngine On
        Options SymLinksIfOwnerMatch
        <VirtualHost *:80>
          KeepAlive on
          # Without ServerName mod_auth_mellon compares against http:// and not https:// from the IdP
          ServerName https://%{REQUEST_HOST}
          ProxyPreserveHost on
          RewriteCond %{REQUEST_URI}     ^/ws        [NC]
          RewriteCond %{HTTP:UPGRADE}    ^websocket$ [NC]
          RewriteCond %{HTTP:CONNECTION} ^Upgrade$   [NC]
          RewriteRule .* ws://websocket:3000%{REQUEST_URI}  [P,QSA,L]
          ProxyPassReverse /ws ws://websocket:3000/ws
          # For httpd, some ErrorDocuments must by served by the httpd pod
          RewriteCond %{REQUEST_URI} !^/proxy_pages
          # For SAML /saml2 is only served by mod_auth_mellon in the httpd pod
          RewriteCond %{REQUEST_URI} !^/saml2
          RewriteRule ^/ http://ui:3000%{REQUEST_URI} [P,QSA,L]
          ProxyPassReverse / http://ui:3000/
          ProxyPass /api http://web-service:3000/api
          ProxyPassReverse /api http://web-service:3000/api
          # Ensures httpd stdout/stderr are seen by 'docker logs'.
          ErrorLog  "| /usr/bin/tee /proc/1/fd/2 /var/log/httpd/error_log"
          CustomLog "| /usr/bin/tee /proc/1/fd/1 /var/log/httpd/access_log" common
        </VirtualHost>
      authentication.conf: |
        # Load appropriate authentication configuration files
        #
        Include "conf.d/configuration-{{ httpd_auth_type }}-auth"
      configuration-internal-auth: |
        # Internal authentication
        #
      configuration-external-auth: |
        Include "conf.d/external-auth-load-modules-conf"
        <Location /dashboard/kerberos_authenticate>
          AuthType                   Kerberos
          AuthName                   "Kerberos Login"
          KrbMethodNegotiate         On
          KrbMethodK5Passwd          Off
          KrbAuthRealms              {{ httpd_auth_kerberos_realms }}
          Krb5KeyTab                 /etc/http.keytab
          KrbServiceName             Any
          Require                    pam-account httpd-auth
          ErrorDocument 401 /proxy_pages/invalid_sso_credentials.js
        </Location>
        Include "conf.d/external-auth-login-form-conf"
        Include "conf.d/external-auth-application-api-conf"
        Include "conf.d/external-auth-lookup-user-details-conf"
        Include "conf.d/external-auth-remote-user-conf"
      configuration-active-directory-auth: |
        Include "conf.d/external-auth-load-modules-conf"
        <Location /dashboard/kerberos_authenticate>
          AuthType                   Kerberos
          AuthName                   "Kerberos Login"
          KrbMethodNegotiate         On
          KrbMethodK5Passwd          Off
          KrbAuthRealms              {{ httpd_auth_kerberos_realms }}
          Krb5KeyTab                 /etc/krb5.keytab
          KrbServiceName             Any
          Require                    pam-account httpd-auth
          ErrorDocument 401 /proxy_pages/invalid_sso_credentials.js
        </Location>
        Include "conf.d/external-auth-login-form-conf"
        Include "conf.d/external-auth-application-api-conf"
        Include "conf.d/external-auth-lookup-user-details-conf"
        Include "conf.d/external-auth-remote-user-conf"
      configuration-saml-auth: |
        LoadModule auth_mellon_module modules/mod_auth_mellon.so
        <Location />
          MellonEnable               "info"
          MellonIdPMetadataFile      "/etc/httpd/saml2/idp-metadata.xml"
          MellonSPPrivateKeyFile     "/etc/httpd/saml2/sp-key.key"
          MellonSPCertFile           "/etc/httpd/saml2/sp-cert.cert"
          MellonSPMetadataFile       "/etc/httpd/saml2/sp-metadata.xml"
          MellonVariable             "sp-cookie"
          MellonSecureCookie         On
          MellonCookiePath           "/"
          MellonIdP                  "IDP"
          MellonEndpointPath         "/saml2"
          MellonUser                 username
          MellonMergeEnvVars         On
          MellonSetEnvNoPrefix       "REMOTE_USER"            username
          MellonSetEnvNoPrefix       "REMOTE_USER_EMAIL"      email
          MellonSetEnvNoPrefix       "REMOTE_USER_FIRSTNAME"  firstname
          MellonSetEnvNoPrefix       "REMOTE_USER_LASTNAME"   lastname
          MellonSetEnvNoPrefix       "REMOTE_USER_FULLNAME"   fullname
          MellonSetEnvNoPrefix       "REMOTE_USER_GROUPS"     groups
        </Location>
        <Location /saml_login>
          AuthType                   "Mellon"
          MellonEnable               "auth"
          Require                    valid-user
        </Location>
        Include "conf.d/external-auth-remote-user-conf"
      external-auth-load-modules-conf: |
        LoadModule authnz_pam_module            modules/mod_authnz_pam.so
        LoadModule intercept_form_submit_module modules/mod_intercept_form_submit.so
        LoadModule lookup_identity_module       modules/mod_lookup_identity.so
        LoadModule auth_kerb_module             modules/mod_auth_kerb.so
      external-auth-login-form-conf: |
        <Location /dashboard/external_authenticate>
          InterceptFormPAMService    httpd-auth
          InterceptFormLogin         user_name
          InterceptFormPassword      user_password
          InterceptFormLoginSkip     admin
          InterceptFormClearRemoteUserForSkipped on
        </Location>
      external-auth-application-api-conf: |
        <LocationMatch ^/api>
          SetEnvIf Authorization     '^Basic +YWRtaW46' let_admin_in
          SetEnvIf X-Auth-Token      '^.+$'             let_api_token_in
          SetEnvIf X-MIQ-Token       '^.+$'             let_sys_token_in
          AuthType                   Basic
          AuthName                   "External Authentication (httpd) for API"
          AuthBasicProvider          PAM
          AuthPAMService             httpd-auth
          Require                    valid-user
          Order                      Allow,Deny
          Allow from                 env=let_admin_in
          Allow from                 env=let_api_token_in
          Allow from                 env=let_sys_token_in
          Satisfy                    Any
        </LocationMatch>
      external-auth-lookup-user-details-conf: |
        <LocationMatch ^/dashboard/external_authenticate$|^/dashboard/kerberos_authenticate$|^/api>
          LookupUserAttr mail        REMOTE_USER_EMAIL
          LookupUserAttr givenname   REMOTE_USER_FIRSTNAME
          LookupUserAttr sn          REMOTE_USER_LASTNAME
          LookupUserAttr displayname REMOTE_USER_FULLNAME
          LookupUserAttr domainname  REMOTE_USER_DOMAIN
          LookupUserGroups           REMOTE_USER_GROUPS ":"
          LookupDbusTimeout          5000
        </LocationMatch>
      external-auth-remote-user-conf: |
        RequestHeader unset X_REMOTE_USER
        RequestHeader set X_REMOTE_USER           %{REMOTE_USER}e           env=REMOTE_USER
        RequestHeader set X_EXTERNAL_AUTH_ERROR   %{EXTERNAL_AUTH_ERROR}e   env=EXTERNAL_AUTH_ERROR
        RequestHeader set X_REMOTE_USER_EMAIL     %{REMOTE_USER_EMAIL}e     env=REMOTE_USER_EMAIL
        RequestHeader set X_REMOTE_USER_FIRSTNAME %{REMOTE_USER_FIRSTNAME}e env=REMOTE_USER_FIRSTNAME
        RequestHeader set X_REMOTE_USER_LASTNAME  %{REMOTE_USER_LASTNAME}e  env=REMOTE_USER_LASTNAME
        RequestHeader set X_REMOTE_USER_FULLNAME  %{REMOTE_USER_FULLNAME}e  env=REMOTE_USER_FULLNAME
        RequestHeader set X_REMOTE_USER_GROUPS    %{REMOTE_USER_GROUPS}e    env=REMOTE_USER_GROUPS
        RequestHeader set X_REMOTE_USER_DOMAIN    %{REMOTE_USER_DOMAIN}e    env=REMOTE_USER_DOMAIN

- name: process http auth config map
  k8s_v1_config_map:
    state: "{{ state }}"
    namespace: "{{ namespace }}"
    name: "manageiq-httpd-auth-configs"
    data:
      auth-type: internal
      auth-kerberos-realms: "{{ httpd_auth_kerberos_realms }}"
      auth-configuration.conf: |
        # External Authentication Configuration File
        #
        # For details on usage please see https://github.com/ManageIQ/manageiq-pods/blob/master/README.md#configuring-external-authentication

- name: process dummy config map
  k8s_v1_config_map:
    state: "{{ state }}"
    namespace: "{{ namespace }}"
    name: "dummy"
    data:
      container-environment: |
        # This file needs to exist for http to start on this container

- name: process app pvc
  k8s_v1_persistent_volume_claim:
    name: manageiq-app
    namespace: '{{ namespace }}'
    state: "{{ state }}"
    access_modes:
      - ReadWriteOnce
    resources_requests:
      storage: '{{ manage_iq_app_volume_size }}'

- name: process postgresql pvc
  k8s_v1_persistent_volume_claim:
    name: postgresql
    namespace: '{{ namespace }}'
    state: "{{ state }}"
    access_modes:
      - ReadWriteOnce
    resources_requests:
      storage: '{{ manage_iq_pg_volume_size }}'

- name: process artemis pvc
  k8s_v1_persistent_volume_claim:
    name: artemis
    namespace: '{{ namespace }}'
    state: "{{ state }}"
    access_modes:
      - ReadWriteOnce
    resources_requests:
      storage: '{{ manage_iq_artemis_volume_size }}'

- name: process service accounts
  k8s_v1_service_account:
    state: "{{ state }}"
    namespace: "{{ namespace }}"
    name: "{{ item }}"
  with_items:
  - miq-orchestrator
  - miq-anyuid
  - miq-privileged
  - miq-httpd

- name: process http service
  k8s_v1_service:
    name: manageiq-httpd
    namespace: '{{ namespace }}'
    state: "{{ state }}"
    labels:
      app: manageiq
      service: manageiq-httpd
    selector:
      app: manageiq
      service: manageiq-httpd
    ports:
      - name: port-80
        port: 80
        target_port: 80

- name: process http dbus api service
  k8s_v1_service:
    name: manageiq-httpd-dbus-api
    namespace: "{{ namespace }}"
    state: "{{ state }}"
    labels:
      app: manageiq
      service: manageiq-httpd-dbus-api
    selector:
      app: manageiq
      service: manageiq-httpd
    ports:
      - name: http-dbus-api
        port: 8080
        target_port: 8080

- name: process memcached service
  k8s_v1_service:
    name: memcached
    namespace: "{{ namespace }}"
    state: "{{ state }}"
    labels:
      app: manageiq
      service: memcached
    selector:
      app: manageiq
      service: memcached
    ports:
      - name: port-11211
        port: 11211
        target_port: 11211

- name: process postgresql service
  k8s_v1_service:
    name: postgresql
    namespace: "{{ namespace }}"
    state: "{{ state }}"
    labels:
      app: manageiq
      service: postgresql
    selector:
      app: manageiq
      service: postgresql
    ports:
      - name: port-5432
        port: 5432
        targetPort: 5432

- name: process artemis service
  k8s_v1_service:
    name: artemis
    namespace: "{{ namespace }}"
    state: "{{ state }}"
    labels:
      app: manageiq
      service: artemis
    selector:
      app: manageiq
      service: artemis
    ports:
      - name: stomp
        port: 61613
        targetPort: 61613

- name: process app route
  openshift_v1_route:
    name: manageiq
    namespace: "{{ namespace }}"
    state: "{{ state }}"
    spec_port_target_port: 80
    spec_tls_termination: edge
    spec_tls_insecure_edge_termination_policy: Redirect
    labels:
      app: manageiq
      service: manageiq-httpd
    to_name: manageiq-httpd

- name: process app deployment config
  openshift_v1_deployment_config:
    name: manageiq-app
    namespace: "{{ namespace }}"
    state: "{{ state }}"
    labels:
      app: manageiq
      service: manageiq-app
    replicas: 1
    selector:
      app: manageiq
      service: manageiq-app
    spec_template_metadata_labels:
      app: manageiq
      service: manageiq-app
    containers:
      - env:
        - name: ALLOW_INSECURE_SESSION
          value: 'true'
        - name: APPLICATION_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "manageiq-secrets"
              key: admin-password
        - name: GUID
          value: "{{ guid }}"
        - name: DATABASE_REGION
          value: "{{ database_region | string }}"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: "manageiq-secrets"
              key: database-url
        - name: MY_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: V2_KEY
          valueFrom:
            secretKeyRef:
              name: "manageiq-secrets"
              key: v2-key
        - name: ARTEMIS_USER
          value: "{{ artemis_user }}"
        - name: ARTEMIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "manageiq-secrets"
              key: artemis-password
        resources:
          requests:
            memory: "{{ application_mem_req }}"
            cpu: "{{ application_cpu_req }}"
          limits:
            memory: "{{ application_mem_limit }}"
        image: docker.io/manageiq/manageiq-orchestrator:latest
        name: manageiq-app
        ports:
        - container_port: 80
          protocol: TCP
        termination_message_path: /dev/termination-log
        volume_mounts:
        - mount_path: /persistent
          name: manageiq-app
        working_dir: /
    spec_template_spec_service_account: miq-orchestrator
    spec_template_spec_service_account_name: miq-orchestrator
    spec_template_spec_termination_grace_period_seconds: 90
    volumes:
    - name: manageiq-app
      persistent_volume_claim:
        claim_name: manageiq-app
    test: false
    triggers:
    - type: ConfigChange

- name: process httpd deployment config
  openshift_v1_deployment_config:
    name: manageiq-httpd
    namespace: "{{ namespace }}"
    state: "{{ state }}"
    labels:
      app: manageiq
      service: manageiq-httpd
    replicas: 1
    selector:
      app: manageiq
      service: manageiq-httpd
    spec_template_metadata_labels:
      app: manageiq
      service: manageiq-httpd
    volumes:
    - name: httpd-config
      configMap:
        name: "manageiq-httpd-configs"
    - name: httpd-auth-config
      configMap:
        name: "manageiq-httpd-auth-configs"
    - name: "dummy"
      configMap:
        name: dummy
    containers:
      - env:
        - name: HTTPD_AUTH_TYPE
          valueFrom:
            configMapKeyRef:
              name: "manageiq-httpd-auth-configs"
              key: auth-type
        - name: HTTPD_AUTH_KERBEROS_REALMS
          valueFrom:
            configMapKeyRef:
              name: "manageiq-httpd-auth-configs"
              key: auth-kerberos-realms
        image: docker.io/manageiq/httpd:latest
        name: manageiq-app
        security_context:
          privileged: true
        ports:
        - container_port: 80
          protocol: TCP
        - container_port: 8080
          protocol: TCP
        termination_message_path: /dev/termination-log
        working_dir: /
        volume_mounts:
        - name: httpd-config
          mountPath: "{{ httpd_config_dir }}"
        - name: httpd-auth-config
          mountPath: "{{ httpd_auth_config_dir }}"
        - name: dummy
          mountPath: "/etc/container-environment"
          subPath: container-environment
    spec_template_spec_service_account: miq-httpd
    spec_template_spec_service_account_name: miq-httpd
    test: false
    triggers:
    - type: ConfigChange

- name: process artemis deployment config
  openshift_v1_deployment_config:
    name: artemis
    namespace: "{{ namespace }}"
    state: "{{ state }}"
    labels:
      app: manageiq
      service: artemis
    replicas: 1
    selector:
      app: manageiq
      service: artemis
    spec_template_metadata_labels:
      app: manageiq
      service: artemis
    containers:
      - env:
        - name: ARTEMIS_USER
          value: "{{ artemis_user }}"
        - name: ARTEMIS_PASSWORD
          valueFrom:

            secretKeyRef:
              name: "manageiq-secrets"
              key: artemis-password
        image: docker.io/carbonin/artemis:latest
        name: manageiq-app
        ports:
        - container_port: 61613
          protocol: TCP
        termination_message_path: /dev/termination-log
        volume_mounts:
        - mount_path: /var/lib/artemis
          name: artemis
        working_dir: /
    volumes:
    - name: artemis
      persistent_volume_claim:
        claim_name: artemis
    test: false
    triggers:
    - type: ConfigChange

- name: process memcached deployment config
  openshift_v1_deployment_config:
    name: memcached
    namespace: "{{ namespace }}"
    state: "{{ state }}"
    labels:
      app: manageiq
      service: memcached
    replicas: 1
    selector:
      app: manageiq
      service: memcached
    spec_template_metadata_labels:
      app: manageiq
      service: memcached
    containers:
      - env:
          - name: MEMCACHED_MAX_MEMORY
            value: '{{ memcached_max_memory | string}}'
          - name: MEMCACHED_MAX_CONNECTIONS
            value: '{{ memcached_max_connections | string}}'
          - name: MEMCACHED_SLAB_PAGE_SIZE
            value: '{{ memcached_slab_page_size | string}}'
        image: docker.io/manageiq/memcached:latest
        name: memcached
        ports:
        - container_port: 11211
          protocol: TCP
        termination_message_path: /dev/termination-log
        working_dir: /
    test: false
    triggers:
    - type: ConfigChange

- name: process postgresql deployment config
  openshift_v1_deployment_config:
    name: postgresql
    namespace: "{{ namespace }}"
    state: "{{ state }}"
    labels:
      app: manageiq
      service: postgresql
    replicas: 1
    selector:
      app: manageiq
      service: postgresql
    spec_template_metadata_labels:
      app: manageiq
      service: postgresql
    strategy_type: Rolling
    strategy_rolling_params:
      interval_seconds: 1
      max_surge: 25%
      max_unavailable: 25%
      timeout_seconds: 600
      update_period_seconds: 1
    containers:
      - env:
          - name: POSTGRESQL_PASSWORD
            value: '{{ postgresql_password }}'
          - name: POSTGRESQL_USER
            value: '{{ postgresql_user }}'
          - name: POSTGRESQL_DATABASE
            value: '{{ postgresql_database }}'
        image: docker.io/manageiq/postgresql:latest
        name: manageiq-app
        ports:
        - container_port: 5432
          protocol: TCP
        termination_message_path: /dev/termination-log
        volume_mounts:
        - mount_path: /var/lib/pgsql/data
          name: postgresql
        - name: manageiq-app-configs
          mount_path: "/opt/app-root/src/postgresql-cfg/"
        working_dir: /
    volumes:
    - name: postgresql
      persistent_volume_claim:
        claim_name: postgresql
    - name: "manageiq-app-configs"
      configMap:
        name: "manageiq-app-configs"
    test: false
    triggers:
    - type: ConfigChange

- name: remove generated deployment configs
  openshift_v1_deployment_config:
    name: "{{ item }}"
    namespace: "{{ namespace }}"
    state: "{{ state }}"
  with_items:
    - event-handler
    - generic
    - priority
    - reporting
    - schedule
    - ui
    - web-service
    - websocket
  when: state == "absent"

- name: remove generated services
  k8s_v1_service:
    name: "{ item }}"
    namespace: '{{ namespace }}'
    state: "{{ state }}"
  with_items:
    - ui
    - web-service
    - web-socket
  when: state == "absent"
